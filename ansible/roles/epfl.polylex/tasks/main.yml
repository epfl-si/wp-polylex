- name: ImageStream
  openshift:
    state: latest
    kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      labels:
        app: "{{ polylex_app_name }}"
      name: "{{ polylex_app_name }}"
      namespace: "{{ openshift_namespace }}"

- name: BuildConfig
  openshift:
    state: latest
    kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      labels:
        app: "{{ polylex_app_name }}"
      name: "{{ polylex_app_name }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      source:
        type: Git
        git:
          uri: https://github.com/epfl-si/wp-polylex
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile    # Look for Dockerfile in: gitUri/contextDir/dockerfilePath
      output:
        to:
          kind: ImageStreamTag
          name: "{{polylex_imagestream_name}}:latest"

- name: Deployment
  openshift:
    state: latest
    resource: Deployment
    name: "{{ polylex_deploy_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        annotations:
          image.openshift.io/triggers: |-
            [
              {
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "{{ polylex_imagestream_name }}:latest"
                },
                "fieldPath": "spec.template.spec.containers[0].image"
              }
            ]
        labels:
          app: "{{ polylex_app_name }}"
        name: "{{ polylex_deploy_name }}"
        namespace: "{{ openshift_namespace }}"
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: "{{ polylex_app_name }}"
        template:
          metadata:
            labels:
              app: "{{ polylex_app_name }}"
              deployment: "{{ polylex_deploy_name }}"
          spec:
            containers:
              - env:
                  - name: MONGO_URL
                    valueFrom:
                       secretKeyRef:
                        name: "{{ polylex_secret_name }}"
                        key: mongo-url
                  - name: PORT
                    value: '3000'
                  - name: ROOT_URL
                    value: 'https://{{ polylex_cname }}'
                  - name: METEOR_SETTINGS
                    valueFrom:
                       secretKeyRef:
                        name: '{{ polylex_secret_name }}'
                        key: meteor-settings
                image: "{{ openshift_image_registry_inside}}/{{ openshift_namespace }}/{{ polylex_imagestream_name }}"
                imagePullPolicy: Always
                name: pod-polylex
                ports:
                  - containerPort: 3000
                    protocol: TCP
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            terminationGracePeriodSeconds: 30

- name: Service
  openshift:
    state: latest
    resource: Service
    name: "{{ polylex_svc_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ polylex_svc_name }}"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: "{{ polylex_app_name }}"
      spec:
        ports:
        - name: "80"
          port: 80
          protocol: TCP
          targetPort: 3000
        selector:
          app: "{{ polylex_app_name }}"
          deployment: "{{ polylex_deploy_name }}"
        type: ClusterIP

- name: Route
  openshift:
    state: latest
    resource: Route
    name: "{{ polylex_route_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: "{{ polylex_route_name }}"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: "{{ polylex_app_name }}"
      spec:
        host: "{{ polylex_cname }}"
        port:
          targetPort: "80"
        tls:
          termination: edge
        to:
          kind: Service
          name: "{{ polylex_svc_name }}"
          weight: 100
        wildcardPolicy: None

- name: Secrets
  include_tasks: '{{ "secrets.yml" }}'

- name: Build and deploy
  when: openshift_namespace == polylex_build_on_namespace
  shell:
    cmd: |
      oc -n "{{ openshift_namespace }}" start-build "{{ polylex_imagestream_name }}"
  tags:
  - build-and-deploy
  - never

- name: "Promote to production"
  when: >-
    openshift_namespace == 'wwp' and
    ("promote" in ansible_run_tags)
  local_action:
    module: shell
    cmd: |
      oc tag {{ polylex_build_on_namespace }}/{{ polylex_imagestream_name }}:latest wwp/{{ polylex_imagestream_name }}:latest
  tags:
    - promote
    - never
